#+STARTUP: overview

* Repos
#+BEGIN_SRC emacs-lisp
;;;
;;;
;;; BEGIN_REPOS
;;;
;;;
(setq debug-on-error t)
;;;
;;;
;;; END_REPOS
;;;
;;;
#+END_SRC
* Interface tweaks
#+BEGIN_SRC emacs-lisp
;;;
;;;
;;; BEGIN_Interface_Tweaks
;;;
;;;
;; Theme is defined in preload/theme.el
;;(package-install 'monokai-theme)
(prelude-require-packages '(sr-speedbar))

;; Use semantic symbols for tpeedbar
(add-hook 'speedbar-load-hook (lambda () (require 'semantic/sb)))

(setq sr-speedbar-right-side nil) ;; set sr-speedbar to open on the left
(setq speedbar-show-unknown-files t)

(setq select-enable-clipboard t)

(custom-set-variables '(speedbar-show-unknown-files t))

(add-hook 'before-save-hook 'whitespace-cleanup)

(require 'ansi-color)
(defun display-ansi-colors ()
  (interactive)
  (ansi-color-apply-on-region (point-min) (point-max)))


(use-package all-the-icons
  :ensure t)

;;;
;;;
;;; END_Interface_Tweaks
;;;
;;;

#+END_SRC
* Code
#+BEGIN_SRC emacs-lisp

;;;
;;;
;;; BEGIN_code
;;;
;;;

(prelude-require-packages '(dtrt-indent elogcat ggtags py-autopep8 pos-tip company-quickhelp))
(setq byte-compile-warnings nil)

                                        ; Enable the dtrt-indent mode by default to determine the indentation for code
(dtrt-indent-mode 1)

'(safe-local-variable-values
  (quote
   ((eval c-set-offset
          (quote arglist-close)
          0)
    (eval c-set-offset
          (quote arglist-intro)
          (quote ++))
    (eval c-set-offset
          (quote case-label)
          0)
    (eval c-set-offset
          (quote statement-case-open)
          0)
    (eval c-set-offset
          (quote substatement-open)
          0))))

;; use python3 by default
(setq python-shell-interpreter "python3")
;;(setq anaconda-mode-localhost-address "localhost")
(require 'py-autopep8)
(add-hook 'python-mode-hook 'py-autopep8-enable-on-save)
(add-hook 'python-mode-hook 'anaconda-eldoc-mode)

;; box tool tips
(use-package company-box
  :ensure t
  :hook (company-mode . company-box-mode))

(require 'company-box)
;; (use-package company-quickhelp
;;  ;; Quickhelp may incorrectly place tooltip towards end of buffer
;;  ;; See: https://github.com/expez/company-quickhelp/issues/72
;;    :ensure t
;;    :config
;;    (company-quickhelp-mode)
;;   )
;;(require 'company-quickhelp)
;; (company-quickhelp-mode)

;;;
;;;
;;; END_code
;;;
;;;

#+END_SRC
* Docker
#+BEGIN_SRC  emacs-lisp

;;;
;;;
;;; BEGIN_Docker
;;;
;;;

(prelude-require-packages '(docker-tramp))

;;; Docker
(use-package docker
  :commands docker-mode)

(use-package dockerfile-mode
  :mode "Dockerfile\\'")

;;;
;;;
;;; END_Docker
;;;
;;;

#+END_SRC
* General
#+BEGIN_SRC emacs-lisp
;;;
;;;
;;; BEGIN_General
;;;
;;;

(prelude-require-packages '(google-translate gnutls vlf))

(setenv "NO_PROXY" "127.0.0.1")
(setenv "no_proxy" "127.0.0.1")

(fset 'yes-or-no-p 'y-or-n-p)
(global-set-key (kbd "<f5>") 'revert-buffer)

(require 'gnutls)
(add-to-list 'gnutls-trustfiles "/usr/local/etc/openssl/cert.pem")

; see if this needs to be hidden behind some OS specific test
(setq mac-right-option-modifier nil)

;; Fast navigation
;(global-set-key (kbd "s-<left>") 'scroll-down-command)
;(global-set-key (kbd "s-<right>") 'scroll-up-command)
;(global-set-key (kbd "s-<up>") 'beginning-of-buffer)
;(global-set-key (kbd "s-<down>") 'end-of-buffer)


;; Store some more frequently used files in the
(set-register ?t '(file . "~/Documents/org/todo.org"))
(set-register ?d '(file . "~/Documents/org/decrypt.org"))
(set-register ?e '(file . "~/.emacs.d/personal/general_mods.org"))
(set-register ?l '(file . "~/Documents/Papers/library.bib"))

;; Add handlers for certain extensions
(add-to-list 'auto-mode-alist '("\\.te\\'" . m4-mode))

;; Add support for very large files
(require 'vlf-setup)

;;;
;;;
;;; END_General
;;;
;;;

#+END_SRC
* Prelude
#+BEGIN_SRC emacs-lisp
;;;
;;;
;;; BEGIN_Prelude
;;;
;;;

(setq projectile-enable-caching t)
(setq prelude-whitespace nil)

(setq projectile-indexing-method 'hybrid)
(setq projectile-generic-command "fd . -0")

(setq prelude-guru nil)

;; recent changes to helm have removed the left and right arrow keys
;; returning to that functionality
;; https://github.com/emacs-helm/helm/wiki/FAQ#arrow-keys-behavior-have-changed
(define-key helm-map (kbd "<left>") 'helm-previous-source)
(define-key helm-map (kbd "<right>") 'helm-next-source)

;; for helm-find-files
(customize-set-variable 'helm-ff-lynx-style-map t)
;; for helm-imenu
(customize-set-variable 'helm-imenu-lynx-style-map t)
;; for semantic
(customize-set-variable 'helm-semantic-lynx-style-map t)
;; for helm-occur
(customize-set-variable 'helm-occur-use-ioccur-style-keys t)
;; for helm-grep
(customize-set-variable 'helm-grep-use-ioccur-style-keys t)

;;;
;;;
;;; END_Prelude
;;;
;;;

#+END_SRC
* Helm-gtags
#+BEGIN_SRC emacs-lisp
;;;
;;;
;;; BEGIN_Helm_Gtags
;;;
;;;

(prelude-require-packages '(helm-gtags))

(require 'helm-gtags)

(setq
 helm-gtags-ignore-case t
 helm-gtags-auto-update t
 helm-gtags-use-input-at-cursor t
 helm-gtags-pulse-at-cursor t
 helm-gtags-prefix-key "\C-t"
 helm-gtags-suggested-key-mapping t
 )

;; Enable helm-gtags-mode in Dired so you can jump to any tag
;; when navigate project tree with Dired
(add-hook 'dired-mode-hook 'helm-gtags-mode)

;; Enable helm-gtags-mode in Eshell for the same reason as above
(add-hook 'eshell-mode-hook 'helm-gtags-mode)

;; Enable helm-gtags-mode in languages that GNU Global supports
(add-hook 'c-mode-hook 'helm-gtags-mode)
(add-hook 'c++-mode-hook 'helm-gtags-mode)
(add-hook 'java-mode-hook 'helm-gtags-mode)
(add-hook 'asm-mode-hook 'helm-gtags-mode)

;;                                   "M-."   'helm-gtags-find-tag-from-here
;; key bindings
(with-eval-after-load 'helm-gtags
  ;;(define-key helm-gtags-mode-map (kbd "C-c g a") 'helm-gtags-tags-in-this-function)
  (define-key helm-gtags-mode-map (kbd "C-j") 'helm-gtags-select)
  (define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-dwim)
  (define-key helm-gtags-mode-map (kbd "M-?") 'helm-gtags-find-files)
  (define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack)
  (define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
  (define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history))

(provide 'setup-helm-gtags)

;;;
;;;
;;; END_Helm_Gtags
;;;
;;;

#+END_SRC
* Literature
- Setup PDF and referencing
- To use this, make sure the paths in literature-update, literature-add,
and the helm-bibtex configurations are all correct

#+BEGIN_SRC emacs-lisp
;;;
;;;
;;; BEGIN_Literature
;;;
;;;

(prelude-require-packages '(helm-bibtex org-ref bibtex-utils biblio pdf-tools interleave))
(pdf-tools-install)

(require 'auth-source)
(require 'helm-bibtex)

(require 'org-ref)
(require 'doi-utils)
(require 'org-ref-pdf)
(require 'org-ref-url-utils)
(require 'org-ref-latex)
(require 'org-ref-bibtex)
(require 'org-ref-pubmed)
(require 'org-ref-arxiv)
(require 'org-ref-sci-id)
(require 'org-ref-isbn)
(require 'bibtex-utils)
(require 'x2bib)
(require 'biblio)
(require 'interleave)

(add-to-list 'auto-mode-alist '("\\.pdf\\'" . pdf-view-mode))

;;Helm-bibtex configuration options
(setq bibtex-completion-bibliography "~/Documents/Papers/library.bib")
(setq bibtex-completion-library-path "~/Documents/Papers/pdf")
(setq bibtex-completion-notes-path "~/Documents/Papers/notes.org")
(setq bibtex-completion-notes-extension ".org")
(setq bibtex-completion-additional-search-fields '(journal))

;; This tell bibtex-completion to look at the File field of the bibtex
;; entry to figure out which pdf to open
(setq bibtex-completion-pdf-field "file")

(setq reftex-default-bibliography '("~/Documents/Papers/library.bib"))

(setq org-ref-open-pdf-function 'org-ref-get-mendeley-filename)

;; see org-ref for use of these variables
(setq org-ref-bibliography-notes "~/Documents/Papers/notes.org"
      org-ref-default-bibliography '("~/Documents/Papers/library.bib")
      org-ref-pdf-directory "~/Documents/Papers/pdf")

(setq interleave-org-notes-dir-list '("~/Documents/Papers/notes.org" "~/Documents/Papers/pdf"))

;; Add notes to annotated bibliography (or edit existing notes) with C-c 9
(setq bibtex-completion-notes-template-one-file
      (format
       "\n** ${author} (${year}): ${title}\n  :PROPERTIES:\n  :Custom_ID: ${=key=}\n  :URL: ${url}\n  :INTERLEAVE_PDF: %s\n  :END:\n\n" (file-name-nondirectory "${file}")))

;;;
;;;
;;; END_Literature
;;;
;;;


#+END_SRC
* ORG
#+BEGIN_SRC emacs-lisp
;;;
;;;
;;; BEGIN_ORG
;;;
;;;

(prelude-require-packages '(org-plus-contrib ob-translate org-cliplink emacsql emacsql-sqlite))

;; Allow for inline tasks - i.e. tasks that are not headers
(require 'org-inlinetask)

(require 'org-agenda)

(setq org-startup-indented t)

;; Perform lazy searches in ORG, usign space as boolean
(setq org-agenda-search-view-always-boolean t)

(defun bmg/org-archive-done-tasks ()
  "Archive all done tasks."
  (interactive)
  (org-map-entries 'org-archive-subtree "/DONE" 'file))

(setq org-directory "~/Documents/org")

(require 'find-lisp)

(setq bmg/org-agenda-directory (concat org-directory "/gtd/"))
(setq org-agenda-files
      (find-lisp-find-files bmg/org-agenda-directory "\.org$"))

(setq org-default-notes-file (concat bmg/org-agenda-directory "/inbox.org"))

;; max levels to show for refiling
;; (setq org-refile-targets '((org-agenda-files . (:maxlevel . 6))))

(require 'org-capture)
(global-set-key (kbd "C-c c") 'org-capture)

;; setup org protocol for system wide setup
(require 'org-protocol)

;; Capture templates
(add-to-list 'org-capture-templates
             `("i" "inbox" entry (file org-default-notes-file)
               "* TODO %?"))

(add-to-list 'org-capture-templates
             `("l" "link" entry (file org-default-notes-file)
               "* TODO %(org-cliplink-capture)" :immediate-finish t))

(add-to-list 'org-capture-templates
             `("f" "File" entry (file org-default-notes-file)
               "* TODO %F :FILE:\n" :immediate-finish t))

(add-to-list 'org-capture-templates
             `("p" "Protocol" entry (file org-default-notes-file)
               "* TODO %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?\n\n" :immediate-finish t))

(add-to-list 'org-capture-templates
             `("L" "Protocol Link" entry (file org-default-notes-file)
               "* TODO %? [[%:link][%:description]] \nCaptured On: %U\n\n" :immediate-finish t))

(add-to-list 'org-capture-templates
             `("w" "Weekly Review" entry (file+olp+datetree ,(concat bmg/org-agenda-directory "reviews.org"))
               (file ,(concat bmg/org-agenda-directory "templates/weekly_review.org"))))

(add-to-list 'org-agenda-custom-commands
             `("r" "Reading" todo ""
               ((org-agenda-files '(,(concat bmg/org-agenda-directory "reading.org"))))))

(setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
        (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)")))

(setq org-log-done 'time
      org-log-into-drawer t
      org-log-state-notes-insert-after-drawers nil)

(setq org-tag-alist (quote (("@errand" . ?e)
                            ("@office" . ?o)
                            ("@home" . ?h)
                            (:newline)
                            ("WAITING" . ?w)
                            ("HOLD" . ?H)
                            ("CANCELLED" . ?c))))


(setq org-refile-use-outline-path 'file
      org-outline-path-complete-in-steps nil)
(setq org-refile-allow-creating-parent-nodes 'confirm)
(setq org-refile-targets '(("next.org" :level . 0)
                           ("someday.org" :level . 0)
                           ("reading.org" :level . 1)
                           ("projects.org" :maxlevel . 1)))


(defvar bmg/org-agenda-bulk-process-key ?f
  "Default key for bulk processing inbox items.")

(defun bmg/org-process-inbox ()
  "Called in org-agenda-mode, processes all inbox items."
  (interactive)
  (org-agenda-bulk-mark-regexp "inbox:")
  (bmg/bulk-process-entries))

(defvar bmg/org-current-effort "1:00" "Current effort for agenda items.")

(defun bmg/my-org-agenda-set-effort (effort)
  "Set the effort property for the current headline."
  (interactive
   (list (read-string (format "Effort [%s]: " bmg/org-current-effort) nil nil bmg/org-current-effort)))
  (setq bmg/org-current-effort effort)
  (org-agenda-check-no-diary)
  (let* ((hdmarker (or (org-get-at-bol 'org-hd-marker)
                       (org-agenda-error)))
         (buffer (marker-buffer hdmarker))
         (pos (marker-position hdmarker))
         (inhibit-read-only t)
         newhead)
    (org-with-remote-undo buffer
      (with-current-buffer buffer
        (widen)
        (goto-char pos)
        (org-show-context 'agenda)
        (funcall-interactively 'org-set-effort nil bmg/org-current-effort)
        (end-of-line 1)
        (setq newhead (org-get-heading)))
      (org-agenda-change-all-lines newhead hdmarker))))

(defun bmg/org-agenda-process-inbox-item ()
  "Process a single item in the org-agenda."
  (org-with-wide-buffer
   (org-agenda-set-tags)
   (org-agenda-priority)
   (call-interactively 'bmg/my-org-agenda-set-effort)
   (org-agenda-refile nil nil t)))

(defun bmg/bulk-process-entries ()
  (if (not (null org-agenda-bulk-marked-entries))
      (let ((entries (reverse org-agenda-bulk-marked-entries))
            (processed 0)
            (skipped 0))
        (dolist (e entries)
          (let ((pos (text-property-any (point-min) (point-max) 'org-hd-marker e)))
            (if (not pos)
                (progn (message "Skipping removed entry at %s" e)
                       (cl-incf skipped))
              (goto-char pos)
              (let (org-loop-over-headlines-in-active-region) (funcall 'bmg/org-agenda-process-inbox-item))
              ;; `post-command-hook' is not run yet.  We make sure any
              ;; pending log note is processed.
              (when (or (memq 'org-add-log-note (default-value 'post-command-hook))
                        (memq 'org-add-log-note post-command-hook))
                (org-add-log-note))
              (cl-incf processed))))
        (org-agenda-redo)
        (unless org-agenda-persistent-marks (org-agenda-bulk-unmark-all))
        (message "Acted on %d entries%s%s"
                 processed
                 (if (= skipped 0)
                     ""
                   (format ", skipped %d (disappeared before their turn)"
                           skipped))
                 (if (not org-agenda-persistent-marks) "" " (kept marked)")))))

(defun bmg/org-inbox-capture ()
  (interactive)
  "Capture a task in agenda mode."
  (org-capture nil "i"))

(setq org-agenda-bulk-custom-functions `((,bmg/org-agenda-bulk-process-key bmg/org-agenda-process-inbox-item)))

(define-key org-agenda-mode-map "i" 'org-agenda-clock-in)
(define-key org-agenda-mode-map "r" 'bmg/org-process-inbox)
(define-key org-agenda-mode-map "R" 'org-agenda-refile)
(define-key org-agenda-mode-map "c" 'bmg/org-inbox-capture)


(defun bmg/set-todo-state-next ()
  "Visit each parent task and change NEXT states to TODO"
  (org-todo "NEXT"))

(add-hook 'org-clock-in-hook 'bmg/set-todo-state-next 'append)

(use-package org-clock-convenience
  :bind (:map org-agenda-mode-map
              ("<S-up>" . org-clock-convenience-timestamp-up)
              ("<S-down>" . org-clock-convenience-timestamp-down)
              ("o" . org-clock-convenience-fill-gap)
              ("e" . org-clock-convenience-fill-gap-both)))

(setq org-agenda-block-separator nil)
(setq org-agenda-start-with-log-mode t)

(setq bmg/org-agenda-todo-view
      `(" " "Agenda"
        ((agenda ""
                 ((org-agenda-span 'day)
                  (org-deadline-warning-days 365)))
         (todo "TODO"
               ((org-agenda-overriding-header "To Refile")
                (org-agenda-files '(,(concat bmg/org-agenda-directory "inbox.org")))))
         (todo "NEXT"
               ((org-agenda-overriding-header "In Progress")
                (org-agenda-files '(,(concat bmg/org-agenda-directory "someday.org")
                                    ,(concat bmg/org-agenda-directory "projects.org")
                                    ,(concat bmg/org-agenda-directory "next.org")))))
         (todo "TODO"
               ((org-agenda-overriding-header "Projects")
                (org-agenda-files '(,(concat bmg/org-agenda-directory "projects.org")))))
         (todo "TODO"
               ((org-agenda-overriding-header "One-off Tasks")
                (org-agenda-files '(,(concat bmg/org-agenda-directory "next.org")))
                (org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline 'scheduled))))
         nil)))

(add-to-list 'org-agenda-custom-commands `,bmg/org-agenda-todo-view)

;; (defun org-current-is-todo ()
;;   (string= "TODO" (org-get-todo-state)))

(defun bmg/switch-to-agenda ()
  (interactive)
  (org-agenda nil " "))

(bind-key "<f1>" 'bmg/switch-to-agenda)

(setq org-columns-default-format "%40ITEM(Task) %Effort(EE){:} %CLOCKSUM(Time Spent) %SCHEDULED(Scheduled) %DEADLINE(Deadline)")

;; use syntax highlighting in org code blocks
(setq org-src-fontify-natively t)

;; this line activates ditaa
(org-babel-do-load-languages
 'org-babel-load-languages
 '((awk . t)
   (C . t)
   (ditaa . t)
   (dot . t)
   (emacs-lisp . t)
   (latex . t)
   (makefile . t)
   (org . t)
   (python . t)
   (sed . t)
   (shell . t)
   (translate . t)
   ))

;; https://org-roam.readthedocs.io/en/develop/configuration/
(use-package org-roam
  :load-path "~/.emacs.d/elisp/org-roam"
  :commands (org-roam-build-cache)
  :hook
  (after-init . org-roam-mode)
  :bind (:map org-roam-mode-map
              (("C-c z l" . org-roam)
               ("C-c z f" . org-roam-find-file)
               ("C-c z b" . org-roam-switch-to-buffer)
               ("C-c z g" . org-roam-show-graph))
              :map org-mode-map
              (("C-c z i" . org-roam-insert)))
  :custom
  (org-roam-directory (concat org-directory "/roam")))

;;Distinguish internal Roam links from external links
(setq org-roam-link-title-format "R:%s")

;; Visualize the relationships with notes
(setq org-roam-graphviz-executable "/usr/bin/dot")

;;Search the files and manage them better with deft
(use-package deft
  :after org
  :bind
  ("C-c z d" . deft)
  :custom
  (deft-recursive t)
  (deft-use-filter-string-for-filename t)
  (deft-default-extension "org")
  (deft-directory (concat org-directory "/roam")))

;;Org-journal is a more powerful alternative to the simple function org-roam-today
(use-package org-journal
  :bind
  ("C-c z j" . org-journal-new-entry)
  ("C-c z t" . org-journal-today)
  :custom
  (org-journal-date-prefix "#+TITLE: ")
  (org-journal-file-format "%Y-%m-%d.org")
  (org-journal-dir (concat org-directory "/roam"))
  (org-journal-date-format "%A, %d %B %Y")
  :config
  (defun org-journal-today ()
    (interactive)
    (org-journal-new-entry t)))

;; Download images and screenshots to paste into org documents
(use-package org-download
  :after org
  :bind
  (:map org-mode-map
        (("C-c s-Y" . org-download-screenshot)
         ("C-c s-y" . org-download-yank))))

;;;
;;;
;;; END_ORG
;;;
;;;

#+END_SRC
* RSS
- Setup elfeed to read RSS and Atom feeds

#+BEGIN_SRC emacs-lisp

;;;
;;;
;;; BEGIN_RSS
;;;
;;;

(prelude-require-packages '(elfeed elfeed-goodies elfeed-org))
;; Use org to configure rss feeds
(require 'elfeed-org)

(setq elfeed-db-directory "~/Documents/org/elfeed_db")

(defun elfeed-mark-all-as-read ()
  (interactive)
  (mark-whole-buffer)
  (elfeed-search-untag-all-unread))

;;functions to support syncing .elfeed between machines
;;makes sure elfeed reads index from disk before launching
(defun bjm/elfeed-load-db-and-open ()
  "Wrapper to load the elfeed db from disk before opening"
  (interactive)
  (elfeed-db-load)
  (elfeed)
  (elfeed-search-update--force))

;; overload the elfeed keybinding to load the database
(global-set-key (kbd "C-x w") 'bjm/elfeed-load-db-and-open)


;;write to disk when quiting
(defun bjm/elfeed-save-db-and-bury ()
  "Wrapper to save the elfeed db to disk before burying buffer"
  (interactive)
  (elfeed-db-save)
  (quit-window))

(defalias 'elfeed-toggle-star
  (elfeed-expose #'elfeed-search-toggle-all 'star))

(eval-after-load 'elfeed-search
  '(define-key elfeed-search-mode-map (kbd "m") 'elfeed-toggle-star))

(defun bjm/elfeed-show-all ()
  (interactive)
  (bookmark-maybe-load-default-file)
  (bookmark-jump "elfeed-all"))
(defun bjm/elfeed-show-security ()
  (interactive)
  (bookmark-maybe-load-default-file)
  (bookmark-jump "elfeed-security"))
(defun bjm/elfeed-show-linux ()
  (interactive)
  (bookmark-maybe-load-default-file)
  (bookmark-jump "elfeed-linux"))
(defun bjm/elfeed-show-technology ()
  (interactive)
  (bookmark-maybe-load-default-file)
  (bookmark-jump "elfeed-technology"))
(defun bjm/elfeed-show-emacs ()
  (interactive)
  (bookmark-maybe-load-default-file)
  (bookmark-jump "elfeed-emacs"))
(defun bjm/elfeed-show-news ()
  (interactive)
  (bookmark-maybe-load-default-file)
  (bookmark-jump "elfeed-news"))

(use-package elfeed
  :ensure t
  :bind (:map elfeed-search-mode-map
              ("q" . bjm/elfeed-save-db-and-bury)
              ("Q" . bjm/elfeed-save-db-and-bury)
              ("m" . elfeed-toggle-star)
              ("M" . elfeed-toggle-star)
              ("A" . bjm/elfeed-show-all)
              ("S" . bjm/elfeed-show-security)
              ("L" . bjm/elfeed-show-linux)
              ("T" . bjm/elfeed-show-technology)
              ("E" . bjm/elfeed-show-emacs)
              ("N" . bjm/elfeed-show-news)
              )
  )

(use-package elfeed-goodies
  :ensure t
  :config
  (elfeed-goodies/setup)
  (setq elfeed-goodies/entry-pane-position 'bottom))

(use-package elfeed-org
  :ensure t
  :config
  (elfeed-org)
  (setq rmh-elfeed-org-files (list (concat org-directory "/elfeed.org")))
  (setq rmh-elfeed-org-tree-id "elfeed"))

;; Setup elfeed for rss and atom feeds
(global-set-key (kbd "C-x w") 'elfeed)

(defun elfeed-mark-read ()
  (interactive)
  (elfeed-search-untag-all 'unread)
  (previous-line)
  (elfeed-search-tag-all 'read))

(define-key elfeed-search-mode-map (kbd "r") 'elfeed-mark-read)

(defface security-tag '((t :foreground "red")) "Marks Security tags.")
(defface comics-tag '((t :foreground "magenta")) "Marks Comics tags.")
(defface technology-tag '((t :foreground "gold")) "Marks technology tags.")
(defface linux-tag '((t :foreground "green")) "Marks linux tags.")
(defface news-tag '((t :foreground "white")) "Marks news tags.")
(defface read-tag '((t :foreground "violet")) "Marks read tags.")

;; TODO how to push multiple entries in cleaner way?
(push '(security security-tag)
      elfeed-search-face-alist)
(push '(comics comics-tag)
      elfeed-search-face-alist)
(push '(technology technology-tag)
      elfeed-search-face-alist)
(push '(linux linux-tag)
      elfeed-search-face-alist)
(push '(news news-tag)
      elfeed-search-face-alist)
(push '(read read-tag)
      elfeed-search-face-alist)

;;;
;;;
;;; END_RSS
;;;
;;;

#+END_SRC
* GPG
#+BEGIN_SRC emacs-lisp
;;;
;;;
;;; BEGIN_GPG
;;;
;;;

(setq epg-gpg-program "gpg2")
(setenv "GPG_AGENT_INFO" nil)

(require 'org-crypt)
(org-crypt-use-before-save-magic)
(setq org-tags-exclude-from-inheritance (quote ("crypt")))
;; GPG key to use for encryption
;; Either the Key ID or set to nil to use symmetric encryption.
(setq org-crypt-key "43B5C76A3E26ADB7D6EEEB3D8CEEF0F04B6AC009")

;; quick decrypt key
(global-set-key (kbd "C-x C-g") 'org-decrypt-entry)

;;;
;;;
;;; END_GPG
;;;
;;;

#+END_SRC
